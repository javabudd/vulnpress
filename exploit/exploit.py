from types import ModuleType

from exploit.connection import Connection
from exploit.nonce import Nonce
from db.db import Db
from db.db import Exploit as DBExploit


class Exploit(object):
    def __init__(self, hostname, protocol, username=None, password=None):
        self.db = Db()
        self.connection = Connection()
        self.hostname = protocol + hostname
        self.username = username
        self.password = password
        self.is_logged_in = False
        self.exploit_results = {}
        self.connection.reset_session()

    def exploit(self, short_name=None):
        if self.connection.verify_socket(self.hostname) is False:
            results = {"error": "Could not connect to host."}
        elif self.username and self.password is not None \
                and not self.__login(self.hostname, self.username, self.password):
            results = {"error": "Unable to login with the credentials provided."}
        else:
            if short_name is not None:
                for exploit in self.db.get_exploits_by_exploit_type_short_name(short_name):
                    self.__run_exploit(exploit)
            else:
                for exploit_type in self.db.get_exploit_types():
                    for exploit in self.db.get_exploits_by_exploit_type_id(exploit_type.id):
                        self.__run_exploit(exploit)
            results = self.__get_exploit_results()

        return results

    def __run_exploit(self, exploit: DBExploit):
        if exploit.is_authenticated and not self.is_logged_in:
            pass
        else:
            self.__validate_response(exploit, self.__do_request(exploit))

    def __validate_response(self, exploit: DBExploit, response):
        validator = compile(exploit.validator, '', 'exec')
        module = ModuleType("validator")
        exec(validator, module.__dict__)

        if response and module.validate(response, connection=self.connection, hostname=self.hostname):
            self.__exploit_found(exploit)

    def __do_request(self, exploit: DBExploit):
        url = self.hostname + exploit.exploit_url
        if self.connection.verify_url(url) is False:
            return None

        headers = eval(exploit.exploit_headers) if exploit.exploit_headers is not None else {}
        body = exploit.exploit_body if exploit.exploit_body is not None else ''
        nonce = Nonce(self.connection, self.hostname)

        return self.connection.request(
            hostname=url,
            data=body,
            headers=headers,
            method=exploit.request_method,
            urlencode=exploit.is_url_encode,
            nonce=nonce.get_nonce(exploit, headers)
        )

    def __exploit_found(self, exploit: DBExploit):
        self.exploit_results.update({
            exploit.id: {
                "name": exploit.name,
                "version": exploit.version,
                "exploiturl": exploit.exploit_url
            }
        })

    def __login(self, hostname, username, password):
        self.is_logged_in = self.connection.login(hostname, username, password)

        return self.is_logged_in

    def __get_exploit_results(self):
        exploits = self.exploit_results.copy()
        self.exploit_results.clear()

        return exploits
