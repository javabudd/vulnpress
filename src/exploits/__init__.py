import importlib
import inspect

from exploits.exploit import AbstractExploit
from service.nonce import Nonce
from exploits.exploit import AbstractExploit


def run():
    for a in exploits.__run_exploit():
        mod = importlib.import_module(a)
        print(mod.__all__)
        exit()
        for name, obj in inspect.getmembers(mod, inspect.isclass):
            print(obj, name)

    if exploit.is_authenticated() and not self.is_logged_in:
        pass
    else:
        self.__validate_response(exploit, self.__do_request(exploit))


def __validate_response(self, exploit: AbstractExploit, response):
    if response and exploit.validate(response, connection=self.connection, hostname=self.hostname):
        self.__exploit_found(exploit)


def __do_request(self, exploit: AbstractExploit):
    url = self.hostname + exploit.get_url()
    if self.connection.verify_url(url) is False:
        return None

    headers = exploit.get_headers() if exploit.get_headers() is not None else {}
    body = exploit.get_body() if exploit.get_body() is not None else ''
    nonce = Nonce(self.connection, self.hostname)

    return self.connection.request(
        hostname=url,
        data=body,
        headers=headers,
        method=exploit.get_request_method(),
        urlencode=exploit.is_url_encoded(),
        nonce=nonce.get_nonce(exploit, headers)
    )


def __exploit_found(self, exploit: AbstractExploit):
    self.exploit_results.update({
        id(exploit): {
            "name": exploit.get_name(),
            "version": exploit.get_version(),
            "exploiturl": exploit.get_url()
        }
    })


def __get_exploit_results(self):
    exploits = self.exploit_results.copy()
    self.exploit_results.clear()

    return exploits


def __login(self, hostname: str, username: str, password: str):
    self.is_logged_in = self.connection.login(hostname, username, password)

    return self.is_logged_in
